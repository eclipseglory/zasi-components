var PFS = 1000 / 60;

function getRoot(instance) {
    return instance.selectComponent('#root');
}


function getPieBackground(instance) {
    return instance.selectComponent('#pie-back-ground');
}

//
// function getPie1(instance) {
//     return instance.selectComponent('#pie1');
// }
//
// function getPie2(instance) {
//     return instance.selectComponent('#zasi-pie2');
// }

function initAngle(angle) {
    if (angle == null) return 0;
    if (angle > 360) {
        angle = angle % 360;
    } else if (angle < 0) {
        var t = angle % 360;
        angle = t + 360;
    }
    return angle;
}

function setPieAngle(angle, instance, rAF) {
    if(angle == null) return;
    if (rAF) {
        instance.requestAnimationFrame(function () {
            _setPieAngle(angle, instance);
        });
    } else {
        _setPieAngle(angle, instance);
    }
}

function _setPieAngle(angle, instance) {
    var root = getRoot(instance);
    var dsr = root.getDataset();
    var pieBack = getPieBackground(instance);
    // var pie1 = getPie1(instance);
    // var zasi-pie2 = getPie2(instance);
    var backColor = dsr.backgroundColor;
    var pieColor = dsr.pieColor;
    var background = 'conic-gradient(' + pieColor + ' ' + angle + 'deg';
    if (backColor == null || backColor.trim() == '' || backColor.trim() == 'null') {
        backColor = 'transparent';
    }
    background += ',' + backColor + ' ' + angle + 'deg 360deg';
    background += ') !important';
    pieBack.setStyle({
        'background': background
    });
    // if (angle >= 0 && angle <= 180) {
    //     //conic-gradient(red 6deg);
    //     pieBack.setStyle({
    //         'background': pieColor + ' !important',
    //     });
    //
    //     pie1.setStyle({
    //         'background-image': 'linear-gradient(90deg,' + backColor + ' 50%,transparent 50%) !important;',
    //     });
    //     var pa = angle - 90;
    //     zasi-pie2.setStyle({
    //         'background-image': 'linear-gradient(' + pa + 'deg,' + backColor + ' 50%,transparent 50%) !important;',
    //     })
    //
    //
    // } else if (angle > 180 && angle <= 360) {
    //     pieBack.setStyle({
    //         'background-color': backColor + ' !important',
    //     });
    //
    //     pie1.setStyle({
    //         'background-image': 'linear-gradient(90deg, transparent 50%,' + pieColor + ' 50%) !important;',
    //     });
    //     var pa = angle - 90;
    //     zasi-pie2.setStyle({
    //         'background-image': 'linear-gradient(' + pa + 'deg,  transparent  50%,' + pieColor + ' 50%) !important;',
    //     })
    // }

}

/**
 * @deprecated 暂时不用
 * @param newValue
 * @param oldValue
 * @param ownerInstance
 * @param instance
 */
function radiusChanged(newValue, oldValue, ownerInstance, instance) {
    // if (newValue != null && newValue != oldValue) {
    //     var angle = ownerInstance.getState().lastAngle;
    //     setPieAngle(angle, ownerInstance);
    // }
}


function runAnimation(startAngle, endAngle, ownerInstance) {
    if (ownerInstance.getState().lock) return;

    var dsr = getRoot(ownerInstance).getDataset();
    var totalDelta = endAngle - startAngle;
    if (totalDelta == 0) {
        ownerInstance.getState().lastAngle = endAngle;
        setPieAngle(endAngle, ownerInstance, true);
    } else {
        var tc = Math.floor(dsr.animationDuration / PFS);
        var delta = totalDelta / tc;
        var c = 0;
        var current = startAngle;
        ownerInstance.getState().lock = true; //动画期间锁住所有

        function animation() {
            setPieAngle(current, ownerInstance, false);
            current += delta;
            c++;
            if (c >= tc) {
                setPieAngle(endAngle, ownerInstance, false);
                ownerInstance.getState().lock = false;
                ownerInstance.getState().lastAngle = endAngle;
                return;
            } else {

            }
            ownerInstance.requestAnimationFrame(function () {
                animation();
            })
        }

        animation();
    }
}

function angleChanged(newValue, oldValue, ownerInstance, instance) {
    var lock = ownerInstance.getState().lock;
    if (lock == null) {
        lock = false;
        ownerInstance.getState().lock = lock;
    }
    if (lock) return;
    oldValue = ownerInstance.getState().lastAngle;
    newValue = initAngle(newValue);
    oldValue = initAngle(oldValue);
    var dsr = getRoot(ownerInstance).getDataset();
    if (newValue != null && newValue != oldValue) {
        var angle = newValue;
        if (dsr.animation) {
            if (!dsr.ready) {
                //不在可视范围内，不进行动画,记录数据直到进入可视范围会通知另外一个方法
                ownerInstance.getState().settingAngle = newValue;
                if (ownerInstance.getState().lastAngle == null) //只记录从来没有设置过lastAngle的情况
                    ownerInstance.getState().lastAngle = oldValue;
                return;
            }
            runAnimation(oldValue, angle, ownerInstance);
        } else {
            ownerInstance.getState().lastAngle = angle;
            setPieAngle(angle, ownerInstance, true);
        }
    }
}

function readyChanged(newValue, oldValue, ownerInstance, instance) {
    if (newValue && newValue != oldValue) {
        var startAngle = ownerInstance.getState().lastAngle;
        var endAngle = ownerInstance.getState().settingAngle;
        var dsr = getRoot(ownerInstance).getDataset();
        if (endAngle != null && dsr.animation) {
            if (startAngle != endAngle) {
                runAnimation(startAngle, endAngle, ownerInstance);
                ownerInstance.getState().settingAngle = null;
            }
        }
    }
}

function colorChanged(newValue, oldValue, ownerInstance, instance) {
    if (newValue != oldValue) {
        setPieAngle(ownerInstance.getState().lastAngle, ownerInstance, true)
    }
}


module.exports = {
    colorChanged: colorChanged,
    readyChanged: readyChanged,
    angleChanged: angleChanged
}
